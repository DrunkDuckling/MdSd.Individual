grammar org.xtext.example.mdsd.AndroidGenerator with org.eclipse.xtext.common.Terminals
 
generate androidGenerator "http://www.xtext.org/example/mdsd/AndroidGenerator"
 
AndroidAppProject:
    (applications += Application) (',' applications += Application)*
;
 
terminal PACKAGE_NAME:
    '"' ( ID ('.' ID)* ) '"'
;
 
Application:
    'Application' name=ID attributes += ApplicationAttribute*
;
 
ApplicationAttribute:
        ApplicationVersion		|
        ApplicationPermissionList   |
        ApplicationElementList      
;

ApplicationVersion:
	{ApplicationVersion} 'Android-SDK' ':' result=Number (targetsdk=TargetSDK)?
;

TargetSDK:
	{TargetSDK} 'Target-SDK' ':' result=Number (minsdk=MinSDK)?
;

MinSDK:
	{MinSDK} 'Minimum-SDK' ':' result=Number
;
 
ApplicationPermissionList:
    'permissions' permissions+=Permission (',' permissions += Permission)*
;
 
Permission:
    name = PACKAGE_NAME // android permissions are in packagename fortmat (e.g. "android.permission.INTERNET")
;
 
ApplicationElementList:
    {ApplicationElementList} 'elements' elements += ApplicationElement*
;

ApplicationElement:
	Fragment | Model
;

Model:
	'Model' name = ID
;

 
Fragment:
	{Fragment} 'Fragment' name=ID (activityAttributes+=ActivityLayoutAttributes)?
;


ActivityLayoutAttributes:
	layoutElements += LayoutElement (',' layoutElements += LayoutElement)*
;

LayoutElement:
	Button 					| 
	Dataholders				|
	TypeMap					|
	TypeSetting
;

Dataholders:
	EditText 				|
	Spinner					|
	Textfield
;

TypeMap:
	{TypeMap} 'Map' (activitytypeattribute = ActivityTypeAttributes)?
;

TypeSetting:
	{TypeSetting} 'Settings'
;

ActivityTypeAttributes:
    filter=FilterQuery
;
 
EditText:
    {EditText}'EditText' name=ID
;

Spinner:
	{Spinner}'Spinner' name=ID ('Content:' spinnercon += SpinnerCon (',' spinnercon += SpinnerCon)*)?
;

SpinnerCon:
	text = STRING
;

Textfield:
	{Textfield} 'Textfield' name=ID
;

Button:
    {Button}'Button' name=ID (actions += ButtonActions (',' actions += ButtonActions)*)?
;

ButtonActions:
	Toast | Bundle
;

Toast:
	'Toast' text = STRING
;

Bundle:
	'Bundle' bundleRecipient = [Fragment] ('Holder'(holder += [Dataholders] (',' holder += [Dataholders])*)?)?
;

FilterQuery:
    {FilterQuery} 'FilterQuery' name=ID filterAttributes=FilterAttributes
;
 
FilterAttributes:
    distance=Distance
;
 
Distance:
    'Distance' ':' unit=Unit operator=Operator results=Number
;
 
Number:
    value=INT
;
 
Operator:
    {Less} '>' | {More} '<' | {Equal} '='
;
 
Unit:
    {Meters} 'm' | {Imperial} 'f'
;