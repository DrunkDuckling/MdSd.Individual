/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mdsd.validation;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure2;
import org.xtext.example.mdsd.androidGenerator.AndroidGeneratorPackage;
import org.xtext.example.mdsd.androidGenerator.ApplicationElement;
import org.xtext.example.mdsd.androidGenerator.ApplicationElementList;
import org.xtext.example.mdsd.androidGenerator.ApplicationPermissionList;
import org.xtext.example.mdsd.androidGenerator.Button;
import org.xtext.example.mdsd.androidGenerator.EditText;
import org.xtext.example.mdsd.androidGenerator.Fragment;
import org.xtext.example.mdsd.androidGenerator.FragmentLayoutAttributes;
import org.xtext.example.mdsd.androidGenerator.LayoutElement;
import org.xtext.example.mdsd.androidGenerator.Permission;
import org.xtext.example.mdsd.androidGenerator.Spinner;
import org.xtext.example.mdsd.androidGenerator.TextView;
import org.xtext.example.mdsd.androidGenerator.TypeMap;
import org.xtext.example.mdsd.androidGenerator.TypeSetting;
import org.xtext.example.mdsd.validation.AbstractAndroidGeneratorValidator;

/**
 * This class contains custom validation rules.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class AndroidGeneratorValidator extends AbstractAndroidGeneratorValidator {
  private static Logger logger = Logger.getLogger("AndroidGeneratorValidator");
  
  public static final String INVALID_NAME = "warning";
  
  @Check
  public void checkDuplicateFragmentNames(final ApplicationElementList elements) {
    List<String> fragName = new ArrayList<String>();
    EList<ApplicationElement> _elements = elements.getElements();
    for (final ApplicationElement type : _elements) {
      if ((type instanceof Fragment)) {
        String name = ((Fragment)type).getName();
        boolean _contains = fragName.contains(name);
        if (_contains) {
          this.error("Fragment name is already used", type, null);
        } else {
          fragName.add(name);
        }
      }
    }
  }
  
  @Check
  public void checkFragmentNameStartsWithCapital(final Fragment fragment) {
    boolean _isUpperCase = Character.isUpperCase(fragment.getName().charAt(0));
    boolean _not = (!_isUpperCase);
    if (_not) {
      this.warning("Name should start with a capital", 
        AndroidGeneratorPackage.Literals.APPLICATION_ELEMENT__NAME, AndroidGeneratorValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkMapSetFragment(final FragmentLayoutAttributes layout) {
    EList<LayoutElement> _layoutElements = layout.getLayoutElements();
    for (final LayoutElement type : _layoutElements) {
      if (((type instanceof TypeMap) || (type instanceof TypeSetting))) {
        int _size = layout.getLayoutElements().size();
        boolean _greaterThan = (_size > 1);
        if (_greaterThan) {
          this.error("Only one premade setup is allowed, and can not have custom layout", type, null);
        }
      }
    }
  }
  
  @Check
  public void checkDuplicatePermission(final ApplicationPermissionList permissions) {
    final List<String> foundPermissions = new ArrayList<String>();
    final Procedure2<Permission, Integer> _function = (Permission permission, Integer index) -> {
      boolean _contains = foundPermissions.contains(permission.getName());
      if (_contains) {
        this.error("Permissions have to be unique", 
          AndroidGeneratorPackage.Literals.APPLICATION_PERMISSION_LIST__PERMISSIONS, (index).intValue());
      }
      foundPermissions.add(permission.getName());
    };
    IterableExtensions.<Permission>forEach(permissions.getPermissions(), _function);
  }
  
  @Check
  public void checkLayoutDuplication(final FragmentLayoutAttributes layout) {
    List<String> foundElements = new ArrayList<String>();
    EList<LayoutElement> _layoutElements = layout.getLayoutElements();
    for (final LayoutElement elements : _layoutElements) {
      {
        if ((elements instanceof Button)) {
          String Name = ((Button)elements).getName();
          boolean _contains = foundElements.contains(Name);
          if (_contains) {
            this.error("Layout name already used", elements, null);
          } else {
            foundElements.add(Name);
          }
        }
        if ((elements instanceof EditText)) {
          String Name_1 = ((EditText)elements).getName();
          boolean _contains_1 = foundElements.contains(Name_1);
          if (_contains_1) {
            this.error("Layout name already used", elements, null);
          } else {
            foundElements.add(Name_1);
          }
        }
        if ((elements instanceof Spinner)) {
          String Name_2 = ((Spinner)elements).getName();
          boolean _contains_2 = foundElements.contains(Name_2);
          if (_contains_2) {
            this.error("Layout name already used", elements, null);
          } else {
            foundElements.add(Name_2);
          }
        }
        if ((elements instanceof TextView)) {
          String Name_3 = ((TextView)elements).getName();
          boolean _contains_3 = foundElements.contains(Name_3);
          if (_contains_3) {
            this.error("Layout name already used", elements, null);
          } else {
            foundElements.add(Name_3);
          }
        }
      }
    }
  }
}
