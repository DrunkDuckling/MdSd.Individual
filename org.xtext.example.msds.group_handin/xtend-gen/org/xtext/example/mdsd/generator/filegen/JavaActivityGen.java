package org.xtext.example.mdsd.generator.filegen;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.xtext.example.mdsd.androidGenerator.Application;
import org.xtext.example.mdsd.androidGenerator.ApplicationElement;
import org.xtext.example.mdsd.generator.abstractfiles.AbstractClassGen;

@SuppressWarnings("all")
public class JavaActivityGen extends AbstractClassGen {
  @Override
  protected String getSubClassPath() {
    return "activity";
  }
  
  @Override
  protected boolean isAllowedElement(final ApplicationElement element) {
    throw new Error("Unresolved compilation problems:"
      + "\nActivity cannot be resolved to a type.");
  }
  
  @Override
  protected String retrieveElementTemplate(final Application application, final ApplicationElement element) {
    throw new Error("Unresolved compilation problems:"
      + "\nActivity cannot be resolved to a type."
      + "\nname cannot be resolved"
      + "\nactivityTypeAttributes cannot be resolved"
      + "\nfilter cannot be resolved"
      + "\nname cannot be resolved"
      + "\nactivityTypeAttributes cannot be resolved"
      + "\nfilter cannot be resolved"
      + "\nfilterAttributes cannot be resolved"
      + "\ndistance cannot be resolved"
      + "\nresults cannot be resolved"
      + "\nvalue cannot be resolved"
      + "\nname cannot be resolved"
      + "\ntoLowerCase cannot be resolved");
  }
  
  private String insertMapFields() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public void onMapReady(GoogleMap googleMap) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mMap = googleMap;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mMap.setMapStyle(MapStyleOptions.loadRawResourceStyle(getActivity().getApplicationContext(), R.raw.map_style));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mMap.setMyLocationEnabled(true);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("initDone = true;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("public void findNearLocation(Location location)   {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (getActivity() != null) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("PlacesService service = new PlacesService(getActivity().getResources().getString(R.string.google_maps_key));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("findPlaces = service.findPlaces(location.getLatitude(), location.getLongitude(), filterQuery, distanceThreshold);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("placeNames = new String[findPlaces.size()];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("imageUrl = new String[findPlaces.size()];");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (int i = 0; i < findPlaces.size(); i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (findPlaces.get(i) != null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Place placeDetail = findPlaces.get(i);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("endPoint.setLatitude(placeDetail.getLatitude());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("endPoint.setLongitude(placeDetail.getLongitude());");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (startPoint.distanceTo(endPoint) < distanceThreshold) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("System.out.println(placeDetail.getName());");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("placeNames[i] = placeDetail.getName();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("imageUrl[i] = placeDetail.getName();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public void onLocationChanged(Location location) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (mMap != null) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(location.getLatitude(), location.getLongitude()), 14));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("new GetPlacesAsyncTask(location).execute();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public void onStatusChanged(String provider, int status, Bundle extras) {}");
    _builder.newLine();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public void onProviderEnabled(String provider) {}");
    _builder.newLine();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public void onProviderDisabled(String provider) {}");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("public class PlacesService {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private String API_KEY;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public PlacesService(String apikey) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("this.API_KEY = apikey;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public List<Place> findPlaces(double latitude, double longitude,String placeSpacification, double radius)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String urlString = makeUrl(latitude, longitude,placeSpacification, radius);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("String json = getJSON(urlString);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("System.out.println(json);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("JSONObject object = new JSONObject(json);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("JSONArray array = object.getJSONArray(\"results\");");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ArrayList<Place> arrayList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (int i = 0; i < array.length(); i++) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("Place place = Place.JSONToResult((JSONObject) array.get(i));");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("place.setBitmap(convertURLToBitmap(place.getIcon()));");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("Log.v(\"Places Services \", \"\" + place);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("arrayList.add(place);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return arrayList;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} catch (JSONException ex) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Logger.getLogger(com.example.navbartest.PlacesService.class.getName()).log(Level.SEVERE, null, ex);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private String makeUrl(double latitude, double longitude,String place, double radius) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("StringBuilder urlString = new StringBuilder(\"https://maps.googleapis.com/maps/api/place/search/json?\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (place.equals(\"\")) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(\"&location=\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(latitude);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(\",\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(longitude);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(\"&radius=\" + radius);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(\"&sensor=false&key=\" + API_KEY);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(\"&location=\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(latitude);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(\",\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(longitude);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(\"&radius=\" + radius);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(\"&types=\"+place);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("urlString.append(\"&sensor=false&key=\" + API_KEY);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return urlString.toString();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("protected String getJSON(String url) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return getUrlContents(url);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private String getUrlContents(String theUrl)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("StringBuilder content = new StringBuilder();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("URL url = new URL(theUrl);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("URLConnection urlConnection = url.openConnection();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()), 8);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("String line;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("while ((line = bufferedReader.readLine()) != null) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("content.append(line + \"\\n\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("bufferedReader.close();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return content.toString();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public Bitmap convertURLToBitmap(String imageUrl) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("URL url = new URL(imageUrl);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("HttpURLConnection connection = (HttpURLConnection) url.openConnection();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("connection.setDoInput(true);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("connection.connect();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("InputStream input = connection.getInputStream();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Bitmap myBitmap = BitmapFactory.decodeStream(input);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return myBitmap;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    String data = _builder.toString();
    return data;
  }
}
