package org.xtext.example.mdsd.generator.filegen;

import com.google.common.base.Objects;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.xtext.example.mdsd.androidGenerator.Activity;
import org.xtext.example.mdsd.androidGenerator.ActivityType;
import org.xtext.example.mdsd.androidGenerator.Application;
import org.xtext.example.mdsd.androidGenerator.ApplicationElement;
import org.xtext.example.mdsd.androidGenerator.ApplicationMainActivity;
import org.xtext.example.mdsd.generator.abstractfiles.AbstractClassGen;

@SuppressWarnings("all")
public class JavaActivityGen extends AbstractClassGen {
  @Override
  protected String getSubClassPath() {
    return "activity";
  }
  
  @Override
  protected boolean isAllowedElement(final ApplicationElement element) {
    return (element instanceof Activity);
  }
  
  @Override
  protected String retrieveElementTemplate(final Application application, final ApplicationElement element) {
    Activity activity = ((Activity) element);
    ApplicationMainActivity mainActivity = this.<ApplicationMainActivity>getFieldData(application.getAttributes(), ApplicationMainActivity.class);
    boolean isMainActivity = ((!Objects.equal(mainActivity, null)) && mainActivity.getLauncherActivity().equals(activity));
    ActivityType map = activity.getActivityType();
    boolean isMapActivity = (!Objects.equal(map, null));
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("       ");
    _builder.append("package ");
    String _name = application.getName();
    _builder.append(_name, "       ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("import android.annotation.SuppressLint;");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("import android.content.Context;");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("import android.os.AsyncTask;");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("import android.os.Bundle;");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("import android.view.LayoutInflater;");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("import android.view.View;");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("import android.view.ViewGroup;");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("import androidx.fragment.app.Fragment;");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("import androidx.fragment.app.FragmentActivity;");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    {
      if (isMapActivity) {
        _builder.append("       ");
        _builder.append("import android.location.Location;");
        _builder.newLine();
        _builder.append("       ");
        _builder.append("import android.location.LocationListener;");
        _builder.newLine();
        _builder.append("       ");
        _builder.append("import android.location.LocationManager;");
        _builder.newLine();
        _builder.append("       ");
        _builder.append("import com.google.android.gms.maps.CameraUpdateFactory;");
        _builder.newLine();
        _builder.append("       ");
        _builder.append("import com.google.android.gms.maps.GoogleMap;");
        _builder.newLine();
        _builder.append("       ");
        _builder.append("import com.google.android.gms.maps.OnMapReadyCallback;");
        _builder.newLine();
        _builder.append("       ");
        _builder.append("import com.google.android.gms.maps.SupportMapFragment;");
        _builder.newLine();
        _builder.append("       ");
        _builder.append("import com.google.android.gms.maps.model.BitmapDescriptorFactory;");
        _builder.newLine();
        _builder.append("       ");
        _builder.append("import com.google.android.gms.maps.model.LatLng;");
        _builder.newLine();
        _builder.append("       ");
        _builder.append("import com.google.android.gms.maps.model.MapStyleOptions;");
        _builder.newLine();
        _builder.append("       ");
        _builder.append("import com.google.android.gms.maps.model.MarkerOptions;");
        _builder.newLine();
      }
    }
    _builder.append("      ");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("public class ");
    String _name_1 = activity.getName();
    _builder.append(_name_1, "       ");
    _builder.append(" extends Fragment ");
    {
      if (isMapActivity) {
        _builder.append("implements OnMapReadyCallback, LocationListener");
      }
    }
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("          ");
    _builder.newLine();
    {
      if (isMapActivity) {
        _builder.append("     ");
        _builder.append("private GoogleMap mMap;");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("private String[] placeNames;");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("private String[] imageUrl;");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("private List<Places>;");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("protected LocationManager locationManager;");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("protected LocationListener locationListener;");
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        _builder.append("     ");
        _builder.append("// DSL Params");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("String filterQuery = \"");
        String _name_2 = activity.getActivityTypeAttributes().getFilter().getName();
        _builder.append(_name_2, "     ");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("double distanceThreshold = ");
        int _value = activity.getActivityTypeAttributes().getFilter().getFilterAttributes().getDistance().getResults().getValue();
        _builder.append(_value, "     ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("Location startPoint = new Location(\"locationA\"); // Used for distance measuring");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("Location endPoint = new Location(\"locationB\"); // Used for distance measuring");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("           ");
    _builder.append("@SuppressLint(\"MissingPermission\")");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("protected void onCreate(Bundle savedInstanceState) {");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("super.onCreate(savedInstanceState);");
    _builder.newLine();
    {
      if (isMapActivity) {
        _builder.append("               ");
        _builder.append("// Permission Check");
        _builder.newLine();
        _builder.append("               ");
        _builder.append("if (Permissions.Check_FINE_LOCATION(getActivity())) {");
        _builder.newLine();
        _builder.append("               ");
        _builder.append("     ");
        _builder.append("locationManager = (LocationManager) getActivity().getSystemService(Context.LOCATION_SERVICE);");
        _builder.newLine();
        _builder.append("               ");
        _builder.append("     ");
        _builder.append("locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 10000, 10, this);");
        _builder.newLine();
        _builder.append("               ");
        _builder.append("}");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("           ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("          ");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("View rootView = inflater.inflate(R.layout.");
    String _lowerCase = activity.getName().toLowerCase();
    _builder.append(_lowerCase, "               ");
    _builder.append(", parent, false);");
    _builder.newLineIfNotEmpty();
    {
      if (isMapActivity) {
        _builder.append("               ");
        _builder.append("SupportMapFragment mapFragment = (SupportMapFragment)getChildFragmentManager()");
        _builder.newLine();
        _builder.append("               ");
        _builder.append(".findFragmentById(R.id.map);");
        _builder.newLine();
        _builder.append("               ");
        _builder.append("mapFragment.getMapAsync(this);");
        _builder.newLine();
      }
    }
    _builder.append("               ");
    _builder.append("return rootView;");
    _builder.newLine();
    _builder.append("              ");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("           ");
    String _insertMapFields = this.insertMapFields(map);
    _builder.append(_insertMapFields, "           ");
    _builder.newLineIfNotEmpty();
    _builder.append("          ");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  private String insertMapFields(final ActivityType activityType) {
    boolean _equals = Objects.equal(activityType, null);
    if (_equals) {
      return "";
    }
    boolean isMapActivity = (!Objects.equal(activityType, null));
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("public void onMapReady(GoogleMap googleMap) {");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("mMap = googleMap;");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("mMap.setMapStyle(MapStyleOptions.loadRawResourceStyle(getActivity().getApplicationContext(), R.raw.map_style));");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("mMap.setMyLocationEnabled(true);");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("initDone = true;");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("public void findNearLocation(Location location)   {");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("if (getActivity() != null) {");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("PlacesService service = new PlacesService(getActivity().getResources().getString(R.string.google_maps_key));");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("findPlaces = service.findPlaces(location.getLatitude(), location.getLongitude(), filterQuery, distanceThreshold);");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("placeNames = new String[findPlaces.size()];");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("imageUrl = new String[findPlaces.size()];");
    _builder.newLine();
    _builder.newLine();
    _builder.append("         ");
    _builder.append("for (int i = 0; i < findPlaces.size(); i++) {");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("if (findPlaces.get(i) != null) {");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("Place placeDetail = findPlaces.get(i);");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("endPoint.setLatitude(placeDetail.getLatitude());");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("endPoint.setLongitude(placeDetail.getLongitude());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("if (startPoint.distanceTo(endPoint) < distanceThreshold) {");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("System.out.println(placeDetail.getName());");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("placeNames[i] = placeDetail.getName();");
    _builder.newLine();
    _builder.append("                     ");
    _builder.append("imageUrl[i] = placeDetail.getName();");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("             ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("public void onLocationChanged(Location location) {");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("if (mMap != null) {");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(location.getLatitude(), location.getLongitude()), 14));");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("new GetPlacesAsyncTask(location).execute();");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("public void onStatusChanged(String provider, int status, Bundle extras) {}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("public void onProviderEnabled(String provider) {}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("public void onProviderDisabled(String provider) {}");
    _builder.newLine();
    _builder.newLine();
    {
      if (isMapActivity) {
        _builder.append(" ");
        _builder.append("public class PlacesService {");
        _builder.newLine();
        _builder.append(" ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("private String API_KEY;");
        _builder.newLine();
        _builder.append(" ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("public PlacesService(String apikey) {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("this.API_KEY = apikey;");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("public List<Place> findPlaces(double latitude, double longitude,String placeSpacification, double radius)");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("{");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("String urlString = makeUrl(latitude, longitude,placeSpacification, radius);");
        _builder.newLine();
        _builder.append(" ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("try {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("String json = getJSON(urlString);");
        _builder.newLine();
        _builder.append(" ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("System.out.println(json);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("JSONObject object = new JSONObject(json);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("JSONArray array = object.getJSONArray(\"results\");");
        _builder.newLine();
        _builder.append(" ");
        _builder.newLine();
        _builder.append(" ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("ArrayList<Place> arrayList = new ArrayList<>();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("for (int i = 0; i < array.length(); i++) {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                    ");
        _builder.append("try {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                        ");
        _builder.append("Place place = Place.JSONToResult((JSONObject) array.get(i));");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                        ");
        _builder.append("place.setBitmap(convertURLToBitmap(place.getIcon()));");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                        ");
        _builder.append("Log.v(\"Places Services \", \"\" + place);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                        ");
        _builder.append("arrayList.add(place);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                    ");
        _builder.append("} catch (Exception e) {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("return arrayList;");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("} catch (JSONException ex) {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("Logger.getLogger(com.example.navbartest.PlacesService.class.getName()).log(Level.SEVERE, null, ex);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("return null;");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("private String makeUrl(double latitude, double longitude,String place, double radius) {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("StringBuilder urlString = new StringBuilder(\"https://maps.googleapis.com/maps/api/place/search/json?\");");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("if (place.equals(\"\")) {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(\"&location=\");");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(latitude);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(\",\");");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(longitude);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(\"&radius=\" + radius);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(\"&sensor=false&key=\" + API_KEY);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("} else {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(\"&location=\");");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(latitude);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(\",\");");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(longitude);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(\"&radius=\" + radius);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(\"&types=\"+place);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("urlString.append(\"&sensor=false&key=\" + API_KEY);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("return urlString.toString();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("protected String getJSON(String url) {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("return getUrlContents(url);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("private String getUrlContents(String theUrl)");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("{");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("StringBuilder content = new StringBuilder();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("try {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("URL url = new URL(theUrl);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("URLConnection urlConnection = url.openConnection();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()), 8);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("String line;");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("while ((line = bufferedReader.readLine()) != null) {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                    ");
        _builder.append("content.append(line + \"\\n\");");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("bufferedReader.close();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("catch (Exception e) {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("e.printStackTrace();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("return content.toString();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("public Bitmap convertURLToBitmap(String imageUrl) {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("try {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("URL url = new URL(imageUrl);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("HttpURLConnection connection = (HttpURLConnection) url.openConnection();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("connection.setDoInput(true);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("connection.connect();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("InputStream input = connection.getInputStream();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("Bitmap myBitmap = BitmapFactory.decodeStream(input);");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("return myBitmap;");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("} catch (IOException e) {");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("e.printStackTrace();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("                ");
        _builder.append("return null;");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("            ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    String data = _builder.toString();
    return data;
  }
}
