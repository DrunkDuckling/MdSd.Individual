/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mdsd.generator;

import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mdsd.androidGenerator.Application;
import org.xtext.example.mdsd.generator.abstractfiles.ContentGen;
import org.xtext.example.mdsd.generator.filegen.FragmentGen;
import org.xtext.example.mdsd.generator.filegen.GradleGen;
import org.xtext.example.mdsd.generator.filegen.JavaActivityGen;
import org.xtext.example.mdsd.generator.filegen.LayoutGen;
import org.xtext.example.mdsd.generator.filegen.MainActivityGen;
import org.xtext.example.mdsd.generator.filegen.ManifestGen;
import org.xtext.example.mdsd.generator.filegen.ModelClassGen;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AndroidGeneratorGenerator extends AbstractGenerator {
  private static Logger logger = Logger.getLogger("DslGeneration");
  
  private List<ContentGen> generators;
  
  public AndroidGeneratorGenerator() {
    AndroidGeneratorGenerator.logger.info("Init DSL Generator..");
    ArrayList<ContentGen> _arrayList = new ArrayList<ContentGen>();
    this.generators = _arrayList;
    AndroidGeneratorGenerator.logger.info("Generating Main Activity and Assets..");
    MainActivityGen _mainActivityGen = new MainActivityGen();
    this.generators.add(_mainActivityGen);
    AndroidGeneratorGenerator.logger.info("Generating Activities..");
    JavaActivityGen _javaActivityGen = new JavaActivityGen();
    this.generators.add(_javaActivityGen);
    AndroidGeneratorGenerator.logger.info("Generating Model class..");
    ModelClassGen _modelClassGen = new ModelClassGen();
    this.generators.add(_modelClassGen);
    AndroidGeneratorGenerator.logger.info("Generating Manifest file..");
    ManifestGen _manifestGen = new ManifestGen();
    this.generators.add(_manifestGen);
    AndroidGeneratorGenerator.logger.info("Generating XML Layout..");
    LayoutGen _layoutGen = new LayoutGen();
    this.generators.add(_layoutGen);
    AndroidGeneratorGenerator.logger.info("Generating Gradle build..");
    GradleGen _gradleGen = new GradleGen();
    this.generators.add(_gradleGen);
    AndroidGeneratorGenerator.logger.info("Generating Fragments..");
    FragmentGen _fragmentGen = new FragmentGen();
    this.generators.add(_fragmentGen);
    AndroidGeneratorGenerator.logger.info(String.format("added %d DSL sub-generators", Integer.valueOf(this.generators.size())));
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    AndroidGeneratorGenerator.logger.info("Start DSL - Code Generation");
    List<Application> applications = IteratorExtensions.<Application>toList(Iterators.<Application>filter(resource.getAllContents(), Application.class));
    for (final ContentGen generator : this.generators) {
      generator.generate(applications, fsa);
    }
    AndroidGeneratorGenerator.logger.info("Finished DSL - Code Generation");
  }
  
  @Override
  public void afterGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
  
  @Override
  public void beforeGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
}
