/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mdsd.generator

import java.util.ArrayList
import java.util.List
import java.util.logging.Logger
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mdsd.androidGenerator.Application
import org.xtext.example.mdsd.generator.abstractfiles.ContentGen
//import org.xtext.example.mdsd.generator.filegen.JavaActivityGen
//import org.xtext.example.mdsd.generator.filegen.ModelClassGen
import org.xtext.example.mdsd.generator.filegen.GradleGen
import org.xtext.example.mdsd.generator.filegen.ManifestGen
import org.xtext.example.mdsd.generator.filegen.LayoutGen
import org.xtext.example.mdsd.generator.filegen.MainActivityGen
import org.xtext.example.mdsd.generator.filegen.FragmentGen

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AndroidGeneratorGenerator extends AbstractGenerator {

	var static Logger logger = Logger.getLogger("DslGeneration");
	var List<ContentGen> generators;
	
	
	new() {
		logger.info("Init DSL Generator..");

		generators = new ArrayList<ContentGen>();
	
		logger.info("Generating Main Activity and Assets..");
		generators.add(new MainActivityGen());
		
		//logger.info("Generating Activities..");
		//generators.add(new JavaActivityGen());
		
//		logger.info("Generating Model class..");
//		generators.add(new ModelClassGen());
		
		logger.info("Generating Manifest file..");
		generators.add(new ManifestGen());
		
		logger.info("Generating XML Layout..");
		generators.add(new LayoutGen());
		
		logger.info("Generating Gradle build..");
		generators.add(new GradleGen());
		
		logger.info("Generating Fragments..");
		generators.add(new FragmentGen());
		
		logger.info(String.format("added %d DSL sub-generators", generators.size()));
	}

	override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		logger.info("Start DSL - Code Generation");
		
		var applications = resource.allContents.filter(typeof(Application)).toList;
		
		for (ContentGen generator : generators) {
			generator.generate(applications, fsa);
		}
		
		logger.info("Finished DSL - Code Generation");
	}
	
	override afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
	}
	
	override beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
	
	}
}