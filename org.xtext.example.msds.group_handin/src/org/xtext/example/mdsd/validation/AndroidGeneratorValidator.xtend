/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mdsd.validation

import java.util.ArrayList
import java.util.List
import java.util.logging.Logger
import org.eclipse.xtext.validation.Check
import org.xtext.example.mdsd.androidGenerator.FragmentLayoutAttributes
import org.xtext.example.mdsd.androidGenerator.AndroidGeneratorPackage
import org.xtext.example.mdsd.androidGenerator.Application
import org.xtext.example.mdsd.androidGenerator.ApplicationAttribute
import org.xtext.example.mdsd.androidGenerator.ApplicationElement
import org.xtext.example.mdsd.androidGenerator.ApplicationElementList
import org.xtext.example.mdsd.androidGenerator.ApplicationPermissionList
import org.xtext.example.mdsd.androidGenerator.Fragment
import org.xtext.example.mdsd.androidGenerator.TypeMap
import org.xtext.example.mdsd.androidGenerator.Button
import org.xtext.example.mdsd.androidGenerator.EditText
import org.xtext.example.mdsd.androidGenerator.Spinner
import org.xtext.example.mdsd.androidGenerator.TypeSetting
import org.xtext.example.mdsd.androidGenerator.ApplicationVersion
import org.eclipse.xtext.validation.IssueCodes
import org.xtext.example.mdsd.androidGenerator.TextView

/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class AndroidGeneratorValidator extends AbstractAndroidGeneratorValidator {
	static Logger logger = Logger::getLogger("AndroidGeneratorValidator")
	public static val INVALID_NAME = "warning"
	@Check
	def void checkDuplicateFragmentNames(ApplicationElementList elements) {
		var List<String> fragName = new ArrayList<String>();
		for (ApplicationElement type : elements.getElements()) {
			if (type instanceof Fragment) {
				var String name = type.getName()
				if (fragName.contains(name)) {
					error("Fragment name is already used", type, null)
				} else {
					fragName.add(name)
				}
			}
		}
	}
	
	@Check
    def void checkFragmentNameStartsWithCapital(Fragment fragment) {
		if (!Character.isUpperCase(fragment.getName().charAt(0))) {
			warning("Name should start with a capital", 
				AndroidGeneratorPackage.Literals.APPLICATION_ELEMENT__NAME, INVALID_NAME
			);
		}
    }
	
	@Check
	def void checkMapSetFragment(FragmentLayoutAttributes layout){
		for(type : layout.layoutElements){
			if(type instanceof TypeMap || type instanceof TypeSetting){
				if(layout.layoutElements.size > 1){
					error("Only one premade setup is allowed, and can not have custom layout", type, null)
				}
			}
		}
	}
	
	@Check
    def void checkDuplicatePermission(ApplicationPermissionList permissions) {
    	val List<String> foundPermissions = new ArrayList<String>();
    	permissions.permissions.forEach[permission, index |
    		if (foundPermissions.contains(permission.name)) {
    			error("Permissions have to be unique",
	    			AndroidGeneratorPackage.Literals::APPLICATION_PERMISSION_LIST__PERMISSIONS, index
	    		);
    		}
    		foundPermissions.add(permission.name);
    	];
    }
    
    @Check
    def void checkLayoutDuplication(FragmentLayoutAttributes layout){
		var List<String> foundElements = new ArrayList<String>();
		for(elements : layout.layoutElements){
			if(elements instanceof Button){
				var String Name = elements.name;
				if(foundElements.contains(Name)){
					error("Layout name already used", elements, null)
				}else {
					foundElements.add(Name)
				}
			}if(elements instanceof EditText){
				var String Name = elements.name;
				if(foundElements.contains(Name)){
					error("Layout name already used", elements, null)
				}else {
					foundElements.add(Name)
				}
			}if(elements instanceof Spinner){
				var String Name = elements.name;
				if(foundElements.contains(Name)){
					error("Layout name already used", elements, null)
				}else {
					foundElements.add(Name)
				}
			}if(elements instanceof TextView){
				var String Name = elements.name;
				if(foundElements.contains(Name)){
					error("Layout name already used", elements, null)
				}else {
					foundElements.add(Name)
				}
			}
		}
    }
	
}