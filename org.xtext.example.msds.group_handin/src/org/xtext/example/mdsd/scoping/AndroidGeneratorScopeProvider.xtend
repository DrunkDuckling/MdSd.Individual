/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mdsd.scoping
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.xtext.example.mdsd.androidGenerator.AndroidGeneratorPackage.Literals
import org.xtext.example.mdsd.androidGenerator.Bundle
import org.eclipse.xtext.EcoreUtil2
import org.xtext.example.mdsd.androidGenerator.Fragment
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mdsd.androidGenerator.LayoutElement
import org.xtext.example.mdsd.androidGenerator.Dataholders
import org.xtext.example.mdsd.androidGenerator.EditText
import org.xtext.example.mdsd.androidGenerator.ActivityLayoutAttributes
import org.xtext.example.mdsd.androidGenerator.Button

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AndroidGeneratorScopeProvider extends AbstractAndroidGeneratorScopeProvider {
	
	override IScope getScope(EObject context, EReference reference) {
		
		switch context {
			Bundle case reference==Literals.BUNDLE__HOLDER : {
				val data = EcoreUtil2.getContainerOfType(context, Button)
				return Scopes.scopeFor(data)
			}
			ActivityLayoutAttributes case reference==Literals.LAYOUT_ELEMENT :{
				val data = EcoreUtil2.getContainerOfType(context, Fragment)
				return Scopes.scopeFor(data)
			}
			
		}
		
		super.getScope(context,reference)
	}
}