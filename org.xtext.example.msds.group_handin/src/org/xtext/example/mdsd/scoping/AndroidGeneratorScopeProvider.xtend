/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mdsd.scoping
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import static extension org.eclipse.xtext.EcoreUtil2.*
import org.eclipse.xtext.scoping.IScope
import org.xtext.example.mdsd.androidGenerator.AndroidGeneratorPackage.Literals
import org.xtext.example.mdsd.androidGenerator.Bundle
import org.eclipse.xtext.EcoreUtil2
import org.xtext.example.mdsd.androidGenerator.Fragment
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mdsd.androidGenerator.LayoutElement
import org.xtext.example.mdsd.androidGenerator.Dataholders
import org.xtext.example.mdsd.androidGenerator.EditText
import org.xtext.example.mdsd.androidGenerator.ActivityLayoutAttributes
import org.xtext.example.mdsd.androidGenerator.Button
import org.xtext.example.mdsd.androidGenerator.Holder
import org.xtext.example.mdsd.androidGenerator.ApplicationElementList

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AndroidGeneratorScopeProvider extends AbstractAndroidGeneratorScopeProvider {
	
	override IScope getScope(EObject context, EReference reference) {
//		Get everything in the fragment
		if(context instanceof Bundle){
			val container = context.eContainer.getContainerOfType(ApplicationElementList).elements.map[
				val elem = it
				if(elem instanceof Fragment){
					return elem
				}
			]
			return Scopes.scopeFor(container)
		}
//		get something
		if(context instanceof Holder){
			val container = context.eContainer.getContainerOfType(Fragment).activityAttributes.flatMap[f | f.layoutElements]
			return Scopes.scopeFor(container)
		}
		
		super.getScope(context,reference)
	}
}