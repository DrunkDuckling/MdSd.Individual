/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AndroidGeneratorGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AndroidAppProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.AndroidAppProject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cApplicationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cApplicationsApplicationParserRuleCall_0_0 = (RuleCall)cApplicationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cApplicationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cApplicationsApplicationParserRuleCall_1_1_0 = (RuleCall)cApplicationsAssignment_1_1.eContents().get(0);
		
		//AndroidAppProject:
		//	applications+=Application (',' applications+=Application)*;
		@Override public ParserRule getRule() { return rule; }
		
		//applications+=Application (',' applications+=Application)*
		public Group getGroup() { return cGroup; }
		
		//applications+=Application
		public Assignment getApplicationsAssignment_0() { return cApplicationsAssignment_0; }
		
		//Application
		public RuleCall getApplicationsApplicationParserRuleCall_0_0() { return cApplicationsApplicationParserRuleCall_0_0; }
		
		//(',' applications+=Application)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//applications+=Application
		public Assignment getApplicationsAssignment_1_1() { return cApplicationsAssignment_1_1; }
		
		//Application
		public RuleCall getApplicationsApplicationParserRuleCall_1_1_0() { return cApplicationsApplicationParserRuleCall_1_1_0; }
	}
	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesApplicationAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//Application:
		//	'Application' name=ID attributes+=ApplicationAttribute*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Application' name=ID attributes+=ApplicationAttribute*
		public Group getGroup() { return cGroup; }
		
		//'Application'
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//attributes+=ApplicationAttribute*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//ApplicationAttribute
		public RuleCall getAttributesApplicationAttributeParserRuleCall_2_0() { return cAttributesApplicationAttributeParserRuleCall_2_0; }
	}
	public class ApplicationAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.ApplicationAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cApplicationVersionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cApplicationPermissionListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cApplicationElementListParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ApplicationAttribute:
		//	ApplicationVersion | ApplicationPermissionList | ApplicationElementList;
		@Override public ParserRule getRule() { return rule; }
		
		//ApplicationVersion | ApplicationPermissionList | ApplicationElementList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ApplicationVersion
		public RuleCall getApplicationVersionParserRuleCall_0() { return cApplicationVersionParserRuleCall_0; }
		
		//ApplicationPermissionList
		public RuleCall getApplicationPermissionListParserRuleCall_1() { return cApplicationPermissionListParserRuleCall_1; }
		
		//ApplicationElementList
		public RuleCall getApplicationElementListParserRuleCall_2() { return cApplicationElementListParserRuleCall_2; }
	}
	public class ApplicationVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.ApplicationVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplicationVersionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndroidSDKKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultNumberParserRuleCall_3_0 = (RuleCall)cResultAssignment_3.eContents().get(0);
		private final Assignment cTargetsdkAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetsdkTargetSDKParserRuleCall_4_0 = (RuleCall)cTargetsdkAssignment_4.eContents().get(0);
		
		//ApplicationVersion:
		//	{ApplicationVersion} 'Android-SDK' ':' result=Number targetsdk=TargetSDK?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ApplicationVersion} 'Android-SDK' ':' result=Number targetsdk=TargetSDK?
		public Group getGroup() { return cGroup; }
		
		//{ApplicationVersion}
		public Action getApplicationVersionAction_0() { return cApplicationVersionAction_0; }
		
		//'Android-SDK'
		public Keyword getAndroidSDKKeyword_1() { return cAndroidSDKKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//result=Number
		public Assignment getResultAssignment_3() { return cResultAssignment_3; }
		
		//Number
		public RuleCall getResultNumberParserRuleCall_3_0() { return cResultNumberParserRuleCall_3_0; }
		
		//targetsdk=TargetSDK?
		public Assignment getTargetsdkAssignment_4() { return cTargetsdkAssignment_4; }
		
		//TargetSDK
		public RuleCall getTargetsdkTargetSDKParserRuleCall_4_0() { return cTargetsdkTargetSDKParserRuleCall_4_0; }
	}
	public class TargetSDKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.TargetSDK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTargetSDKAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTargetSDKKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultNumberParserRuleCall_3_0 = (RuleCall)cResultAssignment_3.eContents().get(0);
		private final Assignment cMinsdkAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMinsdkMinSDKParserRuleCall_4_0 = (RuleCall)cMinsdkAssignment_4.eContents().get(0);
		
		//TargetSDK:
		//	{TargetSDK} 'Target-SDK' ':' result=Number minsdk=MinSDK?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TargetSDK} 'Target-SDK' ':' result=Number minsdk=MinSDK?
		public Group getGroup() { return cGroup; }
		
		//{TargetSDK}
		public Action getTargetSDKAction_0() { return cTargetSDKAction_0; }
		
		//'Target-SDK'
		public Keyword getTargetSDKKeyword_1() { return cTargetSDKKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//result=Number
		public Assignment getResultAssignment_3() { return cResultAssignment_3; }
		
		//Number
		public RuleCall getResultNumberParserRuleCall_3_0() { return cResultNumberParserRuleCall_3_0; }
		
		//minsdk=MinSDK?
		public Assignment getMinsdkAssignment_4() { return cMinsdkAssignment_4; }
		
		//MinSDK
		public RuleCall getMinsdkMinSDKParserRuleCall_4_0() { return cMinsdkMinSDKParserRuleCall_4_0; }
	}
	public class MinSDKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.MinSDK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMinSDKAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMinimumSDKKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultNumberParserRuleCall_3_0 = (RuleCall)cResultAssignment_3.eContents().get(0);
		
		//MinSDK:
		//	{MinSDK} 'Minimum-SDK' ':' result=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//{MinSDK} 'Minimum-SDK' ':' result=Number
		public Group getGroup() { return cGroup; }
		
		//{MinSDK}
		public Action getMinSDKAction_0() { return cMinSDKAction_0; }
		
		//'Minimum-SDK'
		public Keyword getMinimumSDKKeyword_1() { return cMinimumSDKKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//result=Number
		public Assignment getResultAssignment_3() { return cResultAssignment_3; }
		
		//Number
		public RuleCall getResultNumberParserRuleCall_3_0() { return cResultNumberParserRuleCall_3_0; }
	}
	public class ApplicationPermissionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.ApplicationPermissionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPermissionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPermissionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPermissionsPermissionParserRuleCall_1_0 = (RuleCall)cPermissionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPermissionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPermissionsPermissionParserRuleCall_2_1_0 = (RuleCall)cPermissionsAssignment_2_1.eContents().get(0);
		
		//ApplicationPermissionList:
		//	'permissions' permissions+=Permission (',' permissions+=Permission)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'permissions' permissions+=Permission (',' permissions+=Permission)*
		public Group getGroup() { return cGroup; }
		
		//'permissions'
		public Keyword getPermissionsKeyword_0() { return cPermissionsKeyword_0; }
		
		//permissions+=Permission
		public Assignment getPermissionsAssignment_1() { return cPermissionsAssignment_1; }
		
		//Permission
		public RuleCall getPermissionsPermissionParserRuleCall_1_0() { return cPermissionsPermissionParserRuleCall_1_0; }
		
		//(',' permissions+=Permission)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//permissions+=Permission
		public Assignment getPermissionsAssignment_2_1() { return cPermissionsAssignment_2_1; }
		
		//Permission
		public RuleCall getPermissionsPermissionParserRuleCall_2_1_0() { return cPermissionsPermissionParserRuleCall_2_1_0; }
	}
	public class PermissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Permission");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePACKAGE_NAMETerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Permission:
		//	name=PACKAGE_NAME // android permissions are in packagename fortmat (e.g. "android.permission.INTERNET")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=PACKAGE_NAME
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//PACKAGE_NAME
		public RuleCall getNamePACKAGE_NAMETerminalRuleCall_0() { return cNamePACKAGE_NAMETerminalRuleCall_0; }
	}
	public class ApplicationElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.ApplicationElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplicationElementListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElementsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsApplicationElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//ApplicationElementList:
		//	{ApplicationElementList} 'elements' elements+=ApplicationElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ApplicationElementList} 'elements' elements+=ApplicationElement*
		public Group getGroup() { return cGroup; }
		
		//{ApplicationElementList}
		public Action getApplicationElementListAction_0() { return cApplicationElementListAction_0; }
		
		//'elements'
		public Keyword getElementsKeyword_1() { return cElementsKeyword_1; }
		
		//elements+=ApplicationElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//ApplicationElement
		public RuleCall getElementsApplicationElementParserRuleCall_2_0() { return cElementsApplicationElementParserRuleCall_2_0; }
	}
	public class ApplicationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.ApplicationElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFragmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ApplicationElement:
		//	Fragment | Model;
		@Override public ParserRule getRule() { return rule; }
		
		//Fragment | Model
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Fragment
		public RuleCall getFragmentParserRuleCall_0() { return cFragmentParserRuleCall_0; }
		
		//Model
		public RuleCall getModelParserRuleCall_1() { return cModelParserRuleCall_1; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Model:
		//	'Model' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Model' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Fragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFragmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFragmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cActivityAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActivityAttributesActivityLayoutAttributesParserRuleCall_3_0 = (RuleCall)cActivityAttributesAssignment_3.eContents().get(0);
		
		//Fragment:
		//	{Fragment} 'Fragment' name=ID activityAttributes+=ActivityLayoutAttributes?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Fragment} 'Fragment' name=ID activityAttributes+=ActivityLayoutAttributes?
		public Group getGroup() { return cGroup; }
		
		//{Fragment}
		public Action getFragmentAction_0() { return cFragmentAction_0; }
		
		//'Fragment'
		public Keyword getFragmentKeyword_1() { return cFragmentKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//activityAttributes+=ActivityLayoutAttributes?
		public Assignment getActivityAttributesAssignment_3() { return cActivityAttributesAssignment_3; }
		
		//ActivityLayoutAttributes
		public RuleCall getActivityAttributesActivityLayoutAttributesParserRuleCall_3_0() { return cActivityAttributesActivityLayoutAttributesParserRuleCall_3_0; }
	}
	public class ActivityLayoutAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.ActivityLayoutAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLayoutElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLayoutElementsLayoutElementParserRuleCall_0_0 = (RuleCall)cLayoutElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLayoutElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLayoutElementsLayoutElementParserRuleCall_1_1_0 = (RuleCall)cLayoutElementsAssignment_1_1.eContents().get(0);
		
		//ActivityLayoutAttributes:
		//	layoutElements+=LayoutElement (',' layoutElements+=LayoutElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//layoutElements+=LayoutElement (',' layoutElements+=LayoutElement)*
		public Group getGroup() { return cGroup; }
		
		//layoutElements+=LayoutElement
		public Assignment getLayoutElementsAssignment_0() { return cLayoutElementsAssignment_0; }
		
		//LayoutElement
		public RuleCall getLayoutElementsLayoutElementParserRuleCall_0_0() { return cLayoutElementsLayoutElementParserRuleCall_0_0; }
		
		//(',' layoutElements+=LayoutElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//layoutElements+=LayoutElement
		public Assignment getLayoutElementsAssignment_1_1() { return cLayoutElementsAssignment_1_1; }
		
		//LayoutElement
		public RuleCall getLayoutElementsLayoutElementParserRuleCall_1_1_0() { return cLayoutElementsLayoutElementParserRuleCall_1_1_0; }
	}
	public class LayoutElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.LayoutElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataholdersParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeMapParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeSettingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LayoutElement:
		//	Button | Dataholders | TypeMap | TypeSetting;
		@Override public ParserRule getRule() { return rule; }
		
		//Button | Dataholders | TypeMap | TypeSetting
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Button
		public RuleCall getButtonParserRuleCall_0() { return cButtonParserRuleCall_0; }
		
		//Dataholders
		public RuleCall getDataholdersParserRuleCall_1() { return cDataholdersParserRuleCall_1; }
		
		//TypeMap
		public RuleCall getTypeMapParserRuleCall_2() { return cTypeMapParserRuleCall_2; }
		
		//TypeSetting
		public RuleCall getTypeSettingParserRuleCall_3() { return cTypeSettingParserRuleCall_3; }
	}
	public class DataholdersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Dataholders");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEditTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpinnerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextfieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Dataholders:
		//	EditText | Spinner | Textfield;
		@Override public ParserRule getRule() { return rule; }
		
		//EditText | Spinner | Textfield
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EditText
		public RuleCall getEditTextParserRuleCall_0() { return cEditTextParserRuleCall_0; }
		
		//Spinner
		public RuleCall getSpinnerParserRuleCall_1() { return cSpinnerParserRuleCall_1; }
		
		//Textfield
		public RuleCall getTextfieldParserRuleCall_2() { return cTextfieldParserRuleCall_2; }
	}
	public class TypeMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.TypeMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActivitytypeattributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActivitytypeattributeActivityTypeAttributesParserRuleCall_2_0 = (RuleCall)cActivitytypeattributeAssignment_2.eContents().get(0);
		
		//TypeMap:
		//	{TypeMap} 'Map' activitytypeattribute=ActivityTypeAttributes?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeMap} 'Map' activitytypeattribute=ActivityTypeAttributes?
		public Group getGroup() { return cGroup; }
		
		//{TypeMap}
		public Action getTypeMapAction_0() { return cTypeMapAction_0; }
		
		//'Map'
		public Keyword getMapKeyword_1() { return cMapKeyword_1; }
		
		//activitytypeattribute=ActivityTypeAttributes?
		public Assignment getActivitytypeattributeAssignment_2() { return cActivitytypeattributeAssignment_2; }
		
		//ActivityTypeAttributes
		public RuleCall getActivitytypeattributeActivityTypeAttributesParserRuleCall_2_0() { return cActivitytypeattributeActivityTypeAttributesParserRuleCall_2_0; }
	}
	public class TypeSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.TypeSetting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeSettingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSettingsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TypeSetting:
		//	{TypeSetting} 'Settings';
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeSetting} 'Settings'
		public Group getGroup() { return cGroup; }
		
		//{TypeSetting}
		public Action getTypeSettingAction_0() { return cTypeSettingAction_0; }
		
		//'Settings'
		public Keyword getSettingsKeyword_1() { return cSettingsKeyword_1; }
	}
	public class ActivityTypeAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.ActivityTypeAttributes");
		private final Assignment cFilterAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFilterFilterQueryParserRuleCall_0 = (RuleCall)cFilterAssignment.eContents().get(0);
		
		//ActivityTypeAttributes:
		//	filter=FilterQuery;
		@Override public ParserRule getRule() { return rule; }
		
		//filter=FilterQuery
		public Assignment getFilterAssignment() { return cFilterAssignment; }
		
		//FilterQuery
		public RuleCall getFilterFilterQueryParserRuleCall_0() { return cFilterFilterQueryParserRuleCall_0; }
	}
	public class EditTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.EditText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEditTextAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEditTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//EditText:
		//	{EditText} 'EditText' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{EditText} 'EditText' name=ID
		public Group getGroup() { return cGroup; }
		
		//{EditText}
		public Action getEditTextAction_0() { return cEditTextAction_0; }
		
		//'EditText'
		public Keyword getEditTextKeyword_1() { return cEditTextKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class SpinnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Spinner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpinnerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpinnerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Spinner:
		//	{Spinner} 'Spinner' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Spinner} 'Spinner' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Spinner}
		public Action getSpinnerAction_0() { return cSpinnerAction_0; }
		
		//'Spinner'
		public Keyword getSpinnerKeyword_1() { return cSpinnerKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class TextfieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Textfield");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextfieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTextfieldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Textfield:
		//	{Textfield} 'Textfield' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Textfield} 'Textfield' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Textfield}
		public Action getTextfieldAction_0() { return cTextfieldAction_0; }
		
		//'Textfield'
		public Keyword getTextfieldKeyword_1() { return cTextfieldKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cButtonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cButtonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cActionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cActionsButtonActionsParserRuleCall_3_0_0 = (RuleCall)cActionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cActionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cActionsButtonActionsParserRuleCall_3_1_1_0 = (RuleCall)cActionsAssignment_3_1_1.eContents().get(0);
		
		//Button:
		//	{Button} 'Button' name=ID (actions+=ButtonActions (',' actions+=ButtonActions)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Button} 'Button' name=ID (actions+=ButtonActions (',' actions+=ButtonActions)*)?
		public Group getGroup() { return cGroup; }
		
		//{Button}
		public Action getButtonAction_0() { return cButtonAction_0; }
		
		//'Button'
		public Keyword getButtonKeyword_1() { return cButtonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(actions+=ButtonActions (',' actions+=ButtonActions)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//actions+=ButtonActions
		public Assignment getActionsAssignment_3_0() { return cActionsAssignment_3_0; }
		
		//ButtonActions
		public RuleCall getActionsButtonActionsParserRuleCall_3_0_0() { return cActionsButtonActionsParserRuleCall_3_0_0; }
		
		//(',' actions+=ButtonActions)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//actions+=ButtonActions
		public Assignment getActionsAssignment_3_1_1() { return cActionsAssignment_3_1_1; }
		
		//ButtonActions
		public RuleCall getActionsButtonActionsParserRuleCall_3_1_1_0() { return cActionsButtonActionsParserRuleCall_3_1_1_0; }
	}
	public class ButtonActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.ButtonActions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cToastParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBundleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ButtonActions:
		//	Toast | Bundle;
		@Override public ParserRule getRule() { return rule; }
		
		//Toast | Bundle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Toast
		public RuleCall getToastParserRuleCall_0() { return cToastParserRuleCall_0; }
		
		//Bundle
		public RuleCall getBundleParserRuleCall_1() { return cBundleParserRuleCall_1; }
	}
	public class ToastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Toast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToastKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Toast:
		//	'Toast' text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Toast' text=STRING
		public Group getGroup() { return cGroup; }
		
		//'Toast'
		public Keyword getToastKeyword_0() { return cToastKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	public class BundleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Bundle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBundleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBundleRecipientAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cBundleRecipientFragmentCrossReference_1_0 = (CrossReference)cBundleRecipientAssignment_1.eContents().get(0);
		private final RuleCall cBundleRecipientFragmentIDTerminalRuleCall_1_0_1 = (RuleCall)cBundleRecipientFragmentCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHolderKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cHolderAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final CrossReference cHolderDataholdersCrossReference_2_1_0_0 = (CrossReference)cHolderAssignment_2_1_0.eContents().get(0);
		private final RuleCall cHolderDataholdersIDTerminalRuleCall_2_1_0_0_1 = (RuleCall)cHolderDataholdersCrossReference_2_1_0_0.eContents().get(1);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cHolderAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final CrossReference cHolderDataholdersCrossReference_2_1_1_1_0 = (CrossReference)cHolderAssignment_2_1_1_1.eContents().get(0);
		private final RuleCall cHolderDataholdersIDTerminalRuleCall_2_1_1_1_0_1 = (RuleCall)cHolderDataholdersCrossReference_2_1_1_1_0.eContents().get(1);
		
		//Bundle:
		//	'Bundle' bundleRecipient=[Fragment] ('Holder' (holder+=[Dataholders] (',' holder+=[Dataholders])*)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Bundle' bundleRecipient=[Fragment] ('Holder' (holder+=[Dataholders] (',' holder+=[Dataholders])*)?)?
		public Group getGroup() { return cGroup; }
		
		//'Bundle'
		public Keyword getBundleKeyword_0() { return cBundleKeyword_0; }
		
		//bundleRecipient=[Fragment]
		public Assignment getBundleRecipientAssignment_1() { return cBundleRecipientAssignment_1; }
		
		//[Fragment]
		public CrossReference getBundleRecipientFragmentCrossReference_1_0() { return cBundleRecipientFragmentCrossReference_1_0; }
		
		//ID
		public RuleCall getBundleRecipientFragmentIDTerminalRuleCall_1_0_1() { return cBundleRecipientFragmentIDTerminalRuleCall_1_0_1; }
		
		//('Holder' (holder+=[Dataholders] (',' holder+=[Dataholders])*)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Holder'
		public Keyword getHolderKeyword_2_0() { return cHolderKeyword_2_0; }
		
		//(holder+=[Dataholders] (',' holder+=[Dataholders])*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//holder+=[Dataholders]
		public Assignment getHolderAssignment_2_1_0() { return cHolderAssignment_2_1_0; }
		
		//[Dataholders]
		public CrossReference getHolderDataholdersCrossReference_2_1_0_0() { return cHolderDataholdersCrossReference_2_1_0_0; }
		
		//ID
		public RuleCall getHolderDataholdersIDTerminalRuleCall_2_1_0_0_1() { return cHolderDataholdersIDTerminalRuleCall_2_1_0_0_1; }
		
		//(',' holder+=[Dataholders])*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//holder+=[Dataholders]
		public Assignment getHolderAssignment_2_1_1_1() { return cHolderAssignment_2_1_1_1; }
		
		//[Dataholders]
		public CrossReference getHolderDataholdersCrossReference_2_1_1_1_0() { return cHolderDataholdersCrossReference_2_1_1_1_0; }
		
		//ID
		public RuleCall getHolderDataholdersIDTerminalRuleCall_2_1_1_1_0_1() { return cHolderDataholdersIDTerminalRuleCall_2_1_1_1_0_1; }
	}
	public class FilterQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.FilterQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFilterQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFilterQueryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cFilterAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFilterAttributesFilterAttributesParserRuleCall_3_0 = (RuleCall)cFilterAttributesAssignment_3.eContents().get(0);
		
		//FilterQuery:
		//	{FilterQuery} 'FilterQuery' name=ID filterAttributes=FilterAttributes;
		@Override public ParserRule getRule() { return rule; }
		
		//{FilterQuery} 'FilterQuery' name=ID filterAttributes=FilterAttributes
		public Group getGroup() { return cGroup; }
		
		//{FilterQuery}
		public Action getFilterQueryAction_0() { return cFilterQueryAction_0; }
		
		//'FilterQuery'
		public Keyword getFilterQueryKeyword_1() { return cFilterQueryKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//filterAttributes=FilterAttributes
		public Assignment getFilterAttributesAssignment_3() { return cFilterAttributesAssignment_3; }
		
		//FilterAttributes
		public RuleCall getFilterAttributesFilterAttributesParserRuleCall_3_0() { return cFilterAttributesFilterAttributesParserRuleCall_3_0; }
	}
	public class FilterAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.FilterAttributes");
		private final Assignment cDistanceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDistanceDistanceParserRuleCall_0 = (RuleCall)cDistanceAssignment.eContents().get(0);
		
		//FilterAttributes:
		//	distance=Distance;
		@Override public ParserRule getRule() { return rule; }
		
		//distance=Distance
		public Assignment getDistanceAssignment() { return cDistanceAssignment; }
		
		//Distance
		public RuleCall getDistanceDistanceParserRuleCall_0() { return cDistanceDistanceParserRuleCall_0; }
	}
	public class DistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Distance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDistanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitUnitParserRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cResultsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResultsNumberParserRuleCall_4_0 = (RuleCall)cResultsAssignment_4.eContents().get(0);
		
		//Distance:
		//	'Distance' ':' unit=Unit operator=Operator results=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'Distance' ':' unit=Unit operator=Operator results=Number
		public Group getGroup() { return cGroup; }
		
		//'Distance'
		public Keyword getDistanceKeyword_0() { return cDistanceKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_2_0() { return cUnitUnitParserRuleCall_2_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_3_0() { return cOperatorOperatorParserRuleCall_3_0; }
		
		//results=Number
		public Assignment getResultsAssignment_4() { return cResultsAssignment_4; }
		
		//Number
		public RuleCall getResultsNumberParserRuleCall_4_0() { return cResultsNumberParserRuleCall_4_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Number");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Number:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLessAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMoreAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cEqualAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Operator:
		//	{Less} '>' | {More} '<' | {Equal} '=';
		@Override public ParserRule getRule() { return rule; }
		
		//{Less} '>' | {More} '<' | {Equal} '='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Less} '>'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Less}
		public Action getLessAction_0_0() { return cLessAction_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_1() { return cGreaterThanSignKeyword_0_1; }
		
		//{More} '<'
		public Group getGroup_1() { return cGroup_1; }
		
		//{More}
		public Action getMoreAction_1_0() { return cMoreAction_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }
		
		//{Equal} '='
		public Group getGroup_2() { return cGroup_2; }
		
		//{Equal}
		public Action getEqualAction_2_0() { return cEqualAction_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMetersAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cMKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cImperialAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Unit:
		//	{Meters} 'm' | {Imperial} 'f';
		@Override public ParserRule getRule() { return rule; }
		
		//{Meters} 'm' | {Imperial} 'f'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Meters} 'm'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Meters}
		public Action getMetersAction_0_0() { return cMetersAction_0_0; }
		
		//'m'
		public Keyword getMKeyword_0_1() { return cMKeyword_0_1; }
		
		//{Imperial} 'f'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Imperial}
		public Action getImperialAction_1_0() { return cImperialAction_1_0; }
		
		//'f'
		public Keyword getFKeyword_1_1() { return cFKeyword_1_1; }
	}
	
	
	private final AndroidAppProjectElements pAndroidAppProject;
	private final TerminalRule tPACKAGE_NAME;
	private final ApplicationElements pApplication;
	private final ApplicationAttributeElements pApplicationAttribute;
	private final ApplicationVersionElements pApplicationVersion;
	private final TargetSDKElements pTargetSDK;
	private final MinSDKElements pMinSDK;
	private final ApplicationPermissionListElements pApplicationPermissionList;
	private final PermissionElements pPermission;
	private final ApplicationElementListElements pApplicationElementList;
	private final ApplicationElementElements pApplicationElement;
	private final ModelElements pModel;
	private final FragmentElements pFragment;
	private final ActivityLayoutAttributesElements pActivityLayoutAttributes;
	private final LayoutElementElements pLayoutElement;
	private final DataholdersElements pDataholders;
	private final TypeMapElements pTypeMap;
	private final TypeSettingElements pTypeSetting;
	private final ActivityTypeAttributesElements pActivityTypeAttributes;
	private final EditTextElements pEditText;
	private final SpinnerElements pSpinner;
	private final TextfieldElements pTextfield;
	private final ButtonElements pButton;
	private final ButtonActionsElements pButtonActions;
	private final ToastElements pToast;
	private final BundleElements pBundle;
	private final FilterQueryElements pFilterQuery;
	private final FilterAttributesElements pFilterAttributes;
	private final DistanceElements pDistance;
	private final NumberElements pNumber;
	private final OperatorElements pOperator;
	private final UnitElements pUnit;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AndroidGeneratorGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAndroidAppProject = new AndroidAppProjectElements();
		this.tPACKAGE_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mdsd.AndroidGenerator.PACKAGE_NAME");
		this.pApplication = new ApplicationElements();
		this.pApplicationAttribute = new ApplicationAttributeElements();
		this.pApplicationVersion = new ApplicationVersionElements();
		this.pTargetSDK = new TargetSDKElements();
		this.pMinSDK = new MinSDKElements();
		this.pApplicationPermissionList = new ApplicationPermissionListElements();
		this.pPermission = new PermissionElements();
		this.pApplicationElementList = new ApplicationElementListElements();
		this.pApplicationElement = new ApplicationElementElements();
		this.pModel = new ModelElements();
		this.pFragment = new FragmentElements();
		this.pActivityLayoutAttributes = new ActivityLayoutAttributesElements();
		this.pLayoutElement = new LayoutElementElements();
		this.pDataholders = new DataholdersElements();
		this.pTypeMap = new TypeMapElements();
		this.pTypeSetting = new TypeSettingElements();
		this.pActivityTypeAttributes = new ActivityTypeAttributesElements();
		this.pEditText = new EditTextElements();
		this.pSpinner = new SpinnerElements();
		this.pTextfield = new TextfieldElements();
		this.pButton = new ButtonElements();
		this.pButtonActions = new ButtonActionsElements();
		this.pToast = new ToastElements();
		this.pBundle = new BundleElements();
		this.pFilterQuery = new FilterQueryElements();
		this.pFilterAttributes = new FilterAttributesElements();
		this.pDistance = new DistanceElements();
		this.pNumber = new NumberElements();
		this.pOperator = new OperatorElements();
		this.pUnit = new UnitElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mdsd.AndroidGenerator".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AndroidAppProject:
	//	applications+=Application (',' applications+=Application)*;
	public AndroidAppProjectElements getAndroidAppProjectAccess() {
		return pAndroidAppProject;
	}
	
	public ParserRule getAndroidAppProjectRule() {
		return getAndroidAppProjectAccess().getRule();
	}
	
	//terminal PACKAGE_NAME:
	//	'"' (ID ('.' ID)*) '"';
	public TerminalRule getPACKAGE_NAMERule() {
		return tPACKAGE_NAME;
	}
	
	//Application:
	//	'Application' name=ID attributes+=ApplicationAttribute*;
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}
	
	//ApplicationAttribute:
	//	ApplicationVersion | ApplicationPermissionList | ApplicationElementList;
	public ApplicationAttributeElements getApplicationAttributeAccess() {
		return pApplicationAttribute;
	}
	
	public ParserRule getApplicationAttributeRule() {
		return getApplicationAttributeAccess().getRule();
	}
	
	//ApplicationVersion:
	//	{ApplicationVersion} 'Android-SDK' ':' result=Number targetsdk=TargetSDK?;
	public ApplicationVersionElements getApplicationVersionAccess() {
		return pApplicationVersion;
	}
	
	public ParserRule getApplicationVersionRule() {
		return getApplicationVersionAccess().getRule();
	}
	
	//TargetSDK:
	//	{TargetSDK} 'Target-SDK' ':' result=Number minsdk=MinSDK?;
	public TargetSDKElements getTargetSDKAccess() {
		return pTargetSDK;
	}
	
	public ParserRule getTargetSDKRule() {
		return getTargetSDKAccess().getRule();
	}
	
	//MinSDK:
	//	{MinSDK} 'Minimum-SDK' ':' result=Number;
	public MinSDKElements getMinSDKAccess() {
		return pMinSDK;
	}
	
	public ParserRule getMinSDKRule() {
		return getMinSDKAccess().getRule();
	}
	
	//ApplicationPermissionList:
	//	'permissions' permissions+=Permission (',' permissions+=Permission)*;
	public ApplicationPermissionListElements getApplicationPermissionListAccess() {
		return pApplicationPermissionList;
	}
	
	public ParserRule getApplicationPermissionListRule() {
		return getApplicationPermissionListAccess().getRule();
	}
	
	//Permission:
	//	name=PACKAGE_NAME // android permissions are in packagename fortmat (e.g. "android.permission.INTERNET")
	//;
	public PermissionElements getPermissionAccess() {
		return pPermission;
	}
	
	public ParserRule getPermissionRule() {
		return getPermissionAccess().getRule();
	}
	
	//ApplicationElementList:
	//	{ApplicationElementList} 'elements' elements+=ApplicationElement*;
	public ApplicationElementListElements getApplicationElementListAccess() {
		return pApplicationElementList;
	}
	
	public ParserRule getApplicationElementListRule() {
		return getApplicationElementListAccess().getRule();
	}
	
	//ApplicationElement:
	//	Fragment | Model;
	public ApplicationElementElements getApplicationElementAccess() {
		return pApplicationElement;
	}
	
	public ParserRule getApplicationElementRule() {
		return getApplicationElementAccess().getRule();
	}
	
	//Model:
	//	'Model' name=ID;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Fragment:
	//	{Fragment} 'Fragment' name=ID activityAttributes+=ActivityLayoutAttributes?;
	public FragmentElements getFragmentAccess() {
		return pFragment;
	}
	
	public ParserRule getFragmentRule() {
		return getFragmentAccess().getRule();
	}
	
	//ActivityLayoutAttributes:
	//	layoutElements+=LayoutElement (',' layoutElements+=LayoutElement)*;
	public ActivityLayoutAttributesElements getActivityLayoutAttributesAccess() {
		return pActivityLayoutAttributes;
	}
	
	public ParserRule getActivityLayoutAttributesRule() {
		return getActivityLayoutAttributesAccess().getRule();
	}
	
	//LayoutElement:
	//	Button | Dataholders | TypeMap | TypeSetting;
	public LayoutElementElements getLayoutElementAccess() {
		return pLayoutElement;
	}
	
	public ParserRule getLayoutElementRule() {
		return getLayoutElementAccess().getRule();
	}
	
	//Dataholders:
	//	EditText | Spinner | Textfield;
	public DataholdersElements getDataholdersAccess() {
		return pDataholders;
	}
	
	public ParserRule getDataholdersRule() {
		return getDataholdersAccess().getRule();
	}
	
	//TypeMap:
	//	{TypeMap} 'Map' activitytypeattribute=ActivityTypeAttributes?;
	public TypeMapElements getTypeMapAccess() {
		return pTypeMap;
	}
	
	public ParserRule getTypeMapRule() {
		return getTypeMapAccess().getRule();
	}
	
	//TypeSetting:
	//	{TypeSetting} 'Settings';
	public TypeSettingElements getTypeSettingAccess() {
		return pTypeSetting;
	}
	
	public ParserRule getTypeSettingRule() {
		return getTypeSettingAccess().getRule();
	}
	
	//ActivityTypeAttributes:
	//	filter=FilterQuery;
	public ActivityTypeAttributesElements getActivityTypeAttributesAccess() {
		return pActivityTypeAttributes;
	}
	
	public ParserRule getActivityTypeAttributesRule() {
		return getActivityTypeAttributesAccess().getRule();
	}
	
	//EditText:
	//	{EditText} 'EditText' name=ID;
	public EditTextElements getEditTextAccess() {
		return pEditText;
	}
	
	public ParserRule getEditTextRule() {
		return getEditTextAccess().getRule();
	}
	
	//Spinner:
	//	{Spinner} 'Spinner' name=ID;
	public SpinnerElements getSpinnerAccess() {
		return pSpinner;
	}
	
	public ParserRule getSpinnerRule() {
		return getSpinnerAccess().getRule();
	}
	
	//Textfield:
	//	{Textfield} 'Textfield' name=ID;
	public TextfieldElements getTextfieldAccess() {
		return pTextfield;
	}
	
	public ParserRule getTextfieldRule() {
		return getTextfieldAccess().getRule();
	}
	
	//Button:
	//	{Button} 'Button' name=ID (actions+=ButtonActions (',' actions+=ButtonActions)*)?;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//ButtonActions:
	//	Toast | Bundle;
	public ButtonActionsElements getButtonActionsAccess() {
		return pButtonActions;
	}
	
	public ParserRule getButtonActionsRule() {
		return getButtonActionsAccess().getRule();
	}
	
	//Toast:
	//	'Toast' text=STRING;
	public ToastElements getToastAccess() {
		return pToast;
	}
	
	public ParserRule getToastRule() {
		return getToastAccess().getRule();
	}
	
	//Bundle:
	//	'Bundle' bundleRecipient=[Fragment] ('Holder' (holder+=[Dataholders] (',' holder+=[Dataholders])*)?)?;
	public BundleElements getBundleAccess() {
		return pBundle;
	}
	
	public ParserRule getBundleRule() {
		return getBundleAccess().getRule();
	}
	
	//FilterQuery:
	//	{FilterQuery} 'FilterQuery' name=ID filterAttributes=FilterAttributes;
	public FilterQueryElements getFilterQueryAccess() {
		return pFilterQuery;
	}
	
	public ParserRule getFilterQueryRule() {
		return getFilterQueryAccess().getRule();
	}
	
	//FilterAttributes:
	//	distance=Distance;
	public FilterAttributesElements getFilterAttributesAccess() {
		return pFilterAttributes;
	}
	
	public ParserRule getFilterAttributesRule() {
		return getFilterAttributesAccess().getRule();
	}
	
	//Distance:
	//	'Distance' ':' unit=Unit operator=Operator results=Number;
	public DistanceElements getDistanceAccess() {
		return pDistance;
	}
	
	public ParserRule getDistanceRule() {
		return getDistanceAccess().getRule();
	}
	
	//Number:
	//	value=INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Operator:
	//	{Less} '>' | {More} '<' | {Equal} '=';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Unit:
	//	{Meters} 'm' | {Imperial} 'f';
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
